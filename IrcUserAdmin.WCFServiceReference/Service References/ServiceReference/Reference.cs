//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IrcUserAdmin.WCFServiceReference.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/IrcUserAdmin.Slave.Contracts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> HostsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> Hosts {
            get {
                return this.HostsField;
            }
            set {
                if ((object.ReferenceEquals(this.HostsField, value) != true)) {
                    this.HostsField = value;
                    this.RaisePropertyChanged("Hosts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Host", Namespace="http://schemas.datacontract.org/2004/07/IrcUserAdmin.Slave.Contracts")]
    [System.SerializableAttribute()]
    public partial class Host : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostAdressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostAdress {
            get {
                return this.HostAdressField;
            }
            set {
                if ((object.ReferenceEquals(this.HostAdressField, value) != true)) {
                    this.HostAdressField = value;
                    this.RaisePropertyChanged("HostAdress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SlaveResponse", Namespace="http://schemas.datacontract.org/2004/07/IrcUserAdmin.Slave.Contracts")]
    [System.SerializableAttribute()]
    public partial class SlaveResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResponseOkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ResponseOk {
            get {
                return this.ResponseOkField;
            }
            set {
                if ((this.ResponseOkField.Equals(value) != true)) {
                    this.ResponseOkField = value;
                    this.RaisePropertyChanged("ResponseOk");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/IrcUserAdmin.Slave.Contracts")]
    [System.SerializableAttribute()]
    public partial class UserList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ircuseradmin.net ", ConfigurationName="ServiceReference.IUserAdmin", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IUserAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/AddUser", ReplyAction="http://ircuseradmin.net /IUserAdmin/AddUserResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse AddUser(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/AddUser", ReplyAction="http://ircuseradmin.net /IUserAdmin/AddUserResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> AddUserAsync(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/ChangePassword", ReplyAction="http://ircuseradmin.net /IUserAdmin/ChangePasswordResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse ChangePassword(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/ChangePassword", ReplyAction="http://ircuseradmin.net /IUserAdmin/ChangePasswordResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> ChangePasswordAsync(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/DeleteUser", ReplyAction="http://ircuseradmin.net /IUserAdmin/DeleteUserResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse DeleteUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/DeleteUser", ReplyAction="http://ircuseradmin.net /IUserAdmin/DeleteUserResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> DeleteUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/ClearDatabase", ReplyAction="http://ircuseradmin.net /IUserAdmin/ClearDatabaseResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse ClearDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/ClearDatabase", ReplyAction="http://ircuseradmin.net /IUserAdmin/ClearDatabaseResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> ClearDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/GetUsers", ReplyAction="http://ircuseradmin.net /IUserAdmin/GetUsersResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.UserList GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/GetUsers", ReplyAction="http://ircuseradmin.net /IUserAdmin/GetUsersResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.UserList> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/AddHosts", ReplyAction="http://ircuseradmin.net /IUserAdmin/AddHostsResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse AddHosts(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/AddHosts", ReplyAction="http://ircuseradmin.net /IUserAdmin/AddHostsResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> AddHostsAsync(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/RemoveHosts", ReplyAction="http://ircuseradmin.net /IUserAdmin/RemoveHostsResponse")]
        IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse RemoveHosts(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ircuseradmin.net /IUserAdmin/RemoveHosts", ReplyAction="http://ircuseradmin.net /IUserAdmin/RemoveHostsResponse")]
        System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> RemoveHostsAsync(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserAdminChannel : IrcUserAdmin.WCFServiceReference.ServiceReference.IUserAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserAdminClient : System.ServiceModel.ClientBase<IrcUserAdmin.WCFServiceReference.ServiceReference.IUserAdmin>, IrcUserAdmin.WCFServiceReference.ServiceReference.IUserAdmin {
        
        public UserAdminClient() {
        }
        
        public UserAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse AddUser(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser) {
            return base.Channel.AddUser(wcfUser);
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> AddUserAsync(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser) {
            return base.Channel.AddUserAsync(wcfUser);
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse ChangePassword(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser) {
            return base.Channel.ChangePassword(wcfUser);
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> ChangePasswordAsync(IrcUserAdmin.WCFServiceReference.ServiceReference.User wcfUser) {
            return base.Channel.ChangePasswordAsync(wcfUser);
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse DeleteUser(string name) {
            return base.Channel.DeleteUser(name);
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> DeleteUserAsync(string name) {
            return base.Channel.DeleteUserAsync(name);
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse ClearDatabase() {
            return base.Channel.ClearDatabase();
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> ClearDatabaseAsync() {
            return base.Channel.ClearDatabaseAsync();
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.UserList GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.UserList> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse AddHosts(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts) {
            return base.Channel.AddHosts(username, wcfHosts);
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> AddHostsAsync(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts) {
            return base.Channel.AddHostsAsync(username, wcfHosts);
        }
        
        public IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse RemoveHosts(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts) {
            return base.Channel.RemoveHosts(username, wcfHosts);
        }
        
        public System.Threading.Tasks.Task<IrcUserAdmin.WCFServiceReference.ServiceReference.SlaveResponse> RemoveHostsAsync(string username, System.Collections.Generic.List<IrcUserAdmin.WCFServiceReference.ServiceReference.Host> wcfHosts) {
            return base.Channel.RemoveHostsAsync(username, wcfHosts);
        }
    }
}
